<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard1.3;net5.0</TargetFrameworks>
    <Title>LinqPlus</Title>
    <RootNamespace>NeoSmart.Linq</RootNamespace>
    <AssemblyName>NeoSmart.Linq</AssemblyName>
    <Authors>NeoSmart Technologies, Mahmoud Al-Qudsi, neosmart</Authors>
    <Company>NeoSmart Technologies</Company>
    <Product>LinqPlus</Product>
    <PackageId>NeoSmart.Linq</PackageId>
    <Description>LinqPlus provides more LINQ awesomeness, with optimized LINQ methods for specific containers, tuple enumeration of dictionaries, functional LINQ extension methods, single function extensions for common patterns, and more.</Description>
    <Copyright>NeoSmart Technologies 2017-2022</Copyright>
    <License>MIT</License>
    <PackageProjectUrl>https://github.com/neosmart/linqplus/</PackageProjectUrl>
    <RepositoryUrl>https://github.com/neosmart/linqplus/</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>linq, extension methods, tuples, performance, linqplus</PackageTags>
    <PackageReleaseNotes>
* 2.0: Add EnumExtensions
* 1.3.0: Optimized .Any()/.Empty()/.None() and .Last(int n) routines for ICollection and IList
* 1.2.4.1: Fix accessibility of .Is/.IsNot/.As&lt;T&gt; class
* 1.2.4: .MaxBy&lt;T,Func&lt;T,B&gt;&gt;() and .MinBy&lt;T,Func&lt;T,B&gt;&gt;()

* 1.2.3: .As&lt;T&gt;()
* 1.2.2: .Is&lt;T&gt;() and .IsNot&lt;T&gt;() extension methods
* 1.2.1: .None() for predicate filtering
* 1.2.0: .FirstOr/LastOr extensions for safe lookup for non-nullable types
* 1.1.0: New IEnumerable&lt;T&gt;.Where(Func&lt;T, bool&gt; condition) extension method
* 1.0: Initial release on NuGet</PackageReleaseNotes>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Version>2.0.0</Version>
  </PropertyGroup>

  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
    <PackageReference Include="System.ValueTuple" Version="4.4.0" />
  </ItemGroup>

</Project>
